一：简单动态字符串（SDS）

1.结构

struct sdshdr{
	//当前字符串的长度
	int len;
	//可以分配的空间
	int free;
	//字符数组
	char buf[];
}


2.应用场景

~用于保存redis中键，当值值list，set，string等等时，其里面包含的值也为SDS
~用于缓冲区，AOF缓冲区和客户端输入缓存区


3.特性及优点

~可以使用常数的时间复杂度获取字符串长度
~避免缓冲区溢出，sdscat(拼接字符串的API)，可以在拼接字符串的时候检查空间是否足够
~空间预分配，在一个SDS小于1MB时，会多分配一倍+1的空间（多的1用于保存空字符串）
在大于等于1MB时会多分配1MB+1的空间
~惰性空间释放，字符串长度变短时，会保留多余的空间，避免内存重新分配
~二进制保存，相比于C语言中字符串（必须符合编码方式，比如ASCII），C语言中字符串不能保存空字符串，
决定了不能保存图片，音视频等等二进制数据文件而SDS则可解决这个问题
~可以兼容C语言，使用<string.h>中函数


二：链表

1.结构

typedef struct listNode{
	//前置节点
	struct listNode *prev;
	//后置节点
	struct listNode *next;
	//节点值
	void *value;
}listNode;

2.应用场景

~广泛使用于redis，比如列表的键，发布订阅，慢查询，监视器等等

3.特性及优点

~双向无环链表


三：字典

1.结构

哈希表
typedef struct dictht{
	//哈希表数组
	dictEntry **table;
	//哈希表大小
	umsigned long size;
	//哈希表大小掩码，计算索引值，永远等于size-1
	unsigned long sizemask;
	//哈希表已有节点数量
	unsigned long used;
}dictht;

字典
typedef struct dict{
	//
	dictType *type;
	//
	void *privdata;
	//
	int trehashidx;
	
	
}



2.应用场景

~用于保存redis数据库，保存哈希键等等

3.特性及优点

~